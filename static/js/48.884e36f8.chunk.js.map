{"version":3,"sources":["pages/Barang/TimbangBarang/FormTimbangBarang.jsx","pages/Barang/TimbangBarang/TimbangBarang.jsx"],"names":["FormTimbangBarang","props","_this","Object","classCallCheck","this","_super","call","state","no_kirim","datagudang","isLoading","loading","timbangan","columns","dataField","text","sort","editable","formatter","data","row","parseFloat","berat_plastik","toFixed","berat_atribut","berat_bandrol","berat","berat_baki","selisih","dispatch","getDataGudang","getDataBaki","getTimbangan","_this2","tanggal","getToday","detail_barang","timbang_barang","setState","postData2","then","res","ToastNotification","updateTimbangBarang","catch","err","console","log","response","_this3","databaki","value","name","forEach","list","kode_baki","nama_baki","push","react_default","a","createElement","onSubmit","handleSubmit","autoComplete","onKeyPress","e","key","preventDefault","className","Field","id","label","onChange","kode_gudang","change","getDataBakiByGudang","options","filter","undefined","map","nama_gudang","placeholder","component","ReanderSelect","htmlFor","lib_default","keyField","products","cellEdit","cellEditFactory","mode","blurToSave","afterSaveCell","oldValue","newValue","column","kode_toko","qty","total","timbang","cek","localStoragedecryp","length","JSON","parse","hasil_cek","findIndex","hasil","localStorageencryp","stringify","type","onClick","sendTimbangan","Fragment","loading_default","background","loaderColor","Component","reduxForm","form","enableReinitialize","connect","data_terima_barang","localStorage","getItem","getDataTimbangan","utility","initialValues","datamaster","databarang","getTimbangBarang","TimbangBarang","isEdit","modalDialog","isLoadingBtn","DataTimbangBarang","SimpanDataBarang","resetTimbangBarang","gudang","baki","getNokirim","react_router_dom","to","panel","TimbangBarang_FormTimbangBarang","handleChange","React"],"mappings":"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","file":"static/js/48.884e36f8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\n// import { getNokirim } from \"../../../actions/databarang_action\";\nimport {\n  getDataBaki,\n  getDataBakiByGudang,\n  getDataGudang,\n} from \"../../../actions/datamaster_action\";\nimport { ReanderSelect } from \"../../../components/helpers/field\";\nimport Loading from \"react-fullscreen-loading\";\nimport {\n  getToday,\n  localStoragedecryp,\n  localStorageencryp,\n} from \"../../../components/helpers/function\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport { updateTimbangBarang } from \"../../../actions/databarang_action\";\nimport { postData2 } from \"../../../config/axios\";\nimport { ToastNotification } from \"../../../components/helpers/notification\";\nimport { getTimbangan } from \"../../../actions/utility_action\";\n\nconst maptostate = (state) => {\n  let data_terima_barang =\n    localStorage.getItem(\"data_terima_barang\") === null || undefined\n      ? []\n      : JSON.parse(localStorage.getItem(\"data_terima_barang\") || []);\n\n  return {\n    getDataTimbangan: state.utility.getTimbangan,\n    initialValues: {\n      no_kirim: data_terima_barang.no_kirim || \"\",\n    },\n    datagudang: state.datamaster.getDataGudang,\n    databaki: state.datamaster.getDataBaki,\n    timbang_barang: state.databarang.getTimbangBarang,\n  };\n};\nclass FormTimbangBarang extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      no_kirim: [],\n      datagudang: [],\n      isLoading: false,\n      loading: false,\n      timbangan: 0,\n      columns: [\n        {\n          dataField: \"kode_gudang\",\n          text: \"Gudang\",\n          sort: true,\n          editable: false,\n        },\n        {\n          dataField: \"kode_toko\",\n          text: \"Baki\",\n          editable: false,\n        },\n        {\n          dataField: \"qty\",\n          text: \"Qty\",\n          editable: false,\n        },\n        {\n          dataField: \"berat\",\n          text: \"Berat\",\n          editable: false,\n        },\n        {\n          dataField: \"berat_baki\",\n          text: \"Berat baki\",\n          editable: false,\n        },\n        {\n          dataField: \"berat_plastik\",\n          text: \"Berat Plastik\",\n          editable: false,\n          formatter: (data, row) => {\n            return parseFloat(row.berat_plastik).toFixed(2);\n          },\n        },\n        {\n          dataField: \"berat_atribut\",\n          text: \"Berat Atribut\",\n          editable: false,\n          formatter: (data, row) => {\n            return parseFloat(row.berat_atribut).toFixed(2);\n          },\n        },\n        {\n          dataField: \"berat_bandrol\",\n          text: \"Berat Bandrol\",\n          editable: false,\n          formatter: (data, row) => {\n            return parseFloat(row.berat_bandrol).toFixed(2);\n          },\n        },\n\n        {\n          dataField: \"total\",\n          text: \"Total\",\n          editable: false,\n          formatter: (data, row) => {\n            return parseFloat(\n              row.berat + row.berat_baki + row.berat_bandrol + row.berat_atribut + row.berat_plastik\n            ).toFixed(2);\n          },\n        },\n        {\n          dataField: \"timbang\",\n          text: \"Timbang\",\n        },\n        {\n          dataField: \"selisih\",\n          text: \"Selisih\",\n          formatter: (data, row) => {\n            return parseFloat(row.selisih).toFixed(2);\n          },\n        },\n      ],\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getDataGudang());\n    this.props.dispatch(getDataBaki());\n    // this.props.dispatch(getNokirim())\n    this.props.dispatch(getTimbangan());\n  }\n  // konektimbangan() {\n  //   setTimeout(() => {\n  //     if (navigator.serial) {\n  //       // this.connectSerial();\n  //       navigator.serial.getPorts()\n  //       .then((ports) => {\n  //       // console.log(ports);\n  //         if (ports.length !== 0) {\n  //           this.connectSerial();\n  //         }\n  //         })\n  //     } else {\n  //       alert('Web Serial API not supported.');\n  //     }\n  //   }, 500);\n  // }\n  // async componentWillUnmount() {\n  //   if (this.reader) {\n  //     await this.reader.cancel();\n  //     // await this.inputDone.catch(() => {});\n  //     this.reader = null;\n  //     this.inputDone = null;\n  //     console.log(\"1\");\n  //   }\n  //   if (this.outputStream) {\n  //     await this.outputStream.getWriter().close();\n  //     await this.outputDone;\n  //     this.outputStream = null;\n  //     this.outputDone = null;\n  //     console.log(\"2\");\n  //   }\n  //   // await port.close();\n  //   if (this.port) {\n  //     // console.log(\"3\");\n  //     await this.port.close()\n  //     this.port = null;\n  //     return false\n  //   }\n\n  // }\n  // async connectSerial() {\n  //   if (this.reader) {\n  //     await this.reader.cancel();\n  //     // await this.inputDone.catch(() => {});\n  //     this.reader = null;\n  //     this.inputDone = null;\n  //     console.log(\"1\");\n  //   }\n  //   if (this.outputStream) {\n  //     await this.outputStream.getWriter().close();\n  //     await this.outputDone;\n  //     this.outputStream = null;\n  //     this.outputDone = null;\n  //     console.log(\"2\");\n  //   }\n  //   // await port.close();\n  //   if (this.port) {\n  //     // console.log(\"3\");\n  //     await this.port.close()\n  //     this.port = null;\n  //     return false\n  //   }\n\n  //   this.port = await navigator.serial.requestPort();\n  //   await this.port.open({ baudRate: 9600, dataBits: 8, parity: \"none\" });\n  //   this.encoder = new window.TextDecoderStream();\n  //   this.encoder2 = new window.TextEncoderStream();\n  //   this.port.readable.pipeTo(this.encoder.writable);\n  //   const inputStream = this.encoder.readable;\n  //   this.reader = inputStream.getReader();\n  //   this.outputStream = this.encoder2.writable;\n\n  //   this.outputDone = this.encoder2.readable.pipeTo(this.port.writable);\n\n  //   let hasil = \"\";\n  //   while (true) {\n  //     const { value, done } = await this.reader.read();\n  //     // console.log('don', done)\n  //     if (value) {\n  //       hasil += value;\n  //       setItem('timbangan', hasil.replace(/[^0-9.g]/g, ''))\n  //       this.props.dispatch(getTimbangan());\n  //       this.setState({\n  //         timbangan : this.props.getDataTimbangan\n  //       })\n  //       console.log(this.props.getDataTimbangan);\n  //       if (/\\d{1,3}\\.\\d{2}/.test(hasil)) {\n  //         document.getElementById(\"id_text\").focus()\n  //       }\n  //     }\n  //     if (done) {\n  //       console.log('[readLoop] DONE', done);\n  //       this.reader.releaseLock();\n  //       break;\n  //     }\n  //   }\n  // }\n  sendTimbangan() {\n    let data = {\n      tanggal: getToday(),\n      detail_barang: this.props.timbang_barang,\n    };\n    this.setState({\n      isLoading: true,\n    });\n    postData2(\"timbang-baki\", data)\n      .then((res) => {\n        this.setState({\n          isLoading: false,\n        });\n        ToastNotification(\"success\", \"Data Berhasil Disimpan\");\n        this.props.dispatch(updateTimbangBarang([]));\n      })\n      .catch((err) => {\n        this.setState({\n          isLoading: false,\n        });\n        console.log(err);\n        ToastNotification(\n          \"error\",\n          err &&\n            err.response &&\n            err.response.data &&\n            \"Terjadi kersalahan saat menimbang baki\"\n        );\n      });\n  }\n\n  render() {\n    let databaki = [\n      {\n        value: \"ALL\",\n        name: \"SEMUA\",\n      },\n    ];\n    this.props.databaki.forEach((list) => {\n      let data = {\n        value: list.kode_baki,\n        name: list.kode_baki + \" - \" + list.nama_baki,\n      };\n      databaki.push(data);\n    });\n    return (\n      <form\n        onSubmit={this.props.handleSubmit}\n        autoComplete=\"off\"\n        onKeyPress={(e) => {\n          e.key === \"Enter\" && e.preventDefault();\n        }}\n      >\n        <div className=\"row\">\n          <div className=\"col-lg-4\">\n            {/* <input type=\"text\" id=\"id_text\"/> */}\n            <Field\n              id=\"kode_gudang\"\n              label=\"Kode Gudang\"\n              name=\"kode_gudang\"\n              onChange={(e) => {\n                this.setState({ kode_gudang: e });\n                this.props.change(\"kode_baki\", \"\");\n                this.props.dispatch(getDataBakiByGudang(e));\n              }}\n              options={this.props.datagudang\n                .filter((list) => list.kode_gudang !== undefined)\n                .map((list) => {\n                  let data = {\n                    value: list.kode_gudang,\n                    name: list.kode_gudang + \" - \" + list.nama_gudang,\n                  };\n                  return data;\n                })}\n              placeholder={\"Silahkan Pilih Kode Gudang\"}\n              component={ReanderSelect}\n            />\n          </div>\n\n          <div className=\"col-lg-4\">\n            <Field\n              id=\"kode_baki\"\n              label=\"Kode Baki\"\n              name=\"kode_baki\"\n              onChange={(e) => {\n                this.setState({ kode_baki: e });\n                this.props.change(\"kode_baki\", \"\");\n              }}\n              options={databaki}\n              placeholder={\"Silahkan Pilih Kode Baki\"}\n              component={ReanderSelect}\n            />\n          </div>\n          <div className=\"col-lg-4\">\n            <label htmlFor=\"\">&nbsp;</label>\n            <button className=\"btn btn-outline-secondary btn-block\">\n              Cari\n            </button>\n          </div>\n        </div>\n        {/* <button type=\"button\" onClick={()=>this.konektimbangan()}> Button </button> */}\n        <BootstrapTable\n          keyField=\"baki\"\n          data={this.props.products || []}\n          columns={this.state.columns || []}\n          cellEdit={cellEditFactory({\n            mode: \"click\",\n            blurToSave: true,\n            afterSaveCell: (oldValue, newValue, row, column) => {\n              let data = {\n                kode_gudang: row.kode_gudang,\n                kode_toko: row.kode_toko,\n                qty: row.qty,\n                berat: row.berat,\n                berat_baki: row.berat_baki,\n                berat_bandrol: row.berat_bandrol,\n                berat_atribut: row.berat_atribut,\n                berat_plastik: row.berat_plastik,\n                total:\n                  parseFloat(row.berat_baki) +\n                  parseFloat(row.berat_bandrol) +\n                  parseFloat(row.berat_atribut) +\n                  parseFloat(row.berat_plastik) +\n                  parseFloat(row.berat),\n                timbang: parseFloat(newValue),\n                selisih: parseFloat(\n                  (\n                    parseFloat(\n                      row.berat_baki +\n                        row.berat_bandrol +\n                        row.berat +\n                        row.berat_plastik +\n                        row.berat_atribut\n                    ) - parseFloat(newValue || 0)\n                  ).toFixed(3) || 0\n                ),\n              };\n              let cek =\n                localStoragedecryp(\"timbang_barang\").length === 0\n                  ? []\n                  : JSON.parse(localStoragedecryp(\"timbang_barang\"));\n              let hasil_cek = cek.findIndex(\n                (hasil) => hasil.kode_toko === data.kode_toko\n              );\n              if (hasil_cek === -1) {\n                cek.push(data);\n                localStorageencryp(\"timbang_barang\", JSON.stringify(cek));\n                this.props.dispatch(updateTimbangBarang(cek));\n              } else {\n                cek[hasil_cek] = data;\n                localStorageencryp(\"timbang_barang\", JSON.stringify(cek));\n                this.props.dispatch(updateTimbangBarang(cek));\n              }\n            },\n          })}\n        />\n        <div className=\"row\">\n          <div className=\"col-lg-8\"></div>\n          <div className=\"col-lg-4 text-right\">\n            <label htmlFor=\"\">&nbsp;</label>\n            <button\n              className=\"btn btn-primary btn-block\"\n              type=\"button\"\n              onClick={() => this.sendTimbangan()}\n            >\n              {this.state.isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin\"></i> &nbsp; Sedang\n                  Menyimpan\n                </>\n              ) : (\n                \"Simpan Data\"\n              )}\n            </button>\n          </div>\n        </div>\n        {this.state.isLoading ? (\n          <Loading\n            loading\n            background=\"rgba(0, 0, 0, 0.35)\"\n            loaderColor=\"rgba(94, 147, 117, 1)\"\n          />\n        ) : null}\n      </form>\n    );\n  }\n}\n\nFormTimbangBarang = reduxForm({\n  form: \"FormTimbangBarang\",\n  enableReinitialize: true,\n})(FormTimbangBarang);\nexport default connect(maptostate, null)(FormTimbangBarang);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Panel, PanelHeader } from \"../../../components/panel/panel.jsx\";\nimport {\n  getNokirim, getTimbangBarang,\n} from \"../../../actions/databarang_action.jsx\";\n\nimport { connect } from \"react-redux\";\nimport {  getToday, localStoragedecryp,} from \"../../../components/helpers/function.jsx\";\nimport FormTimbangBarang from \"./FormTimbangBarang.jsx\";\nconst maptostate = (state) => {\n  return {\n    timbang_barang : state.databarang.getTimbangBarang\n  };\n};\n\nclass TimbangBarang extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEdit: false,\n      modalDialog: false,\n      isLoading: false,\n      isLoadingBtn: false,\n      DataTimbangBarang: [],\n      SimpanDataBarang: false,\n      resetTimbangBarang : false,\n      \n      products : [\n        {\n          gudang : \"TOKO\",\n          baki : \"KLNG\",\n          qty : 10,\n          berat : 200,\n          berat_baki : 100,\n          berat_bandrol: 0.200,\n          total: 1250,\n          timbang: 0,\n          selisih : 0\n        },\n        {\n          gudang : \"TOKO\",\n          baki : \"GLNG\",\n          qty : 10,\n          berat : 200,\n          berat_baki : 100,\n          berat_bandrol: 0.200,\n          total: 1250,\n          timbang: 0,\n          selisih : 0\n        }\n      ]\n    };\n\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getNokirim());\n    this.setState({\n      products : localStoragedecryp(\"timbang_barang\")\n    })\n  }\n\n  handleSubmit(data) {\n    // console.log(data);\n    this.props.dispatch(getTimbangBarang(data.kode_gudang, data.kode_baki, getToday()))\n    \n      \n  }\n\n\n  render() {\n    // console.log(this.props.products);\n    return (\n      <div>\n        <ol className=\"breadcrumb float-xl-right\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"#\">Barang</Link>\n          </li>\n          <li className=\"breadcrumb-item active\">Timbang Baki</li>\n        </ol>\n        <h1 className=\"page-header\">Timbang Baki </h1>\n        <Panel>\n          <PanelHeader>Timbang Baki</PanelHeader>\n          <br />\n\n          {/* Terima Barang */}\n          <div className=\"container\">\n            <FormTimbangBarang\n            handleChange={() => this.handleChange()}\n              column={this.state.columns || []}\n              products={this.props.timbang_barang|| []}\n            onSubmit={(data) => this.handleSubmit(data) }\n            />\n          \n          </div>\n          <br />\n          {/* End Tambah Terima Barang  */}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default connect(maptostate, null)(TimbangBarang);\n"],"sourceRoot":""}